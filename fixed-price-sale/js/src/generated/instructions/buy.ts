/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category Buy
 * @category generated
 */
export type BuyInstructionArgs = {
  tradeHistoryBump: number;
  vaultOwnerBump: number;
};
/**
 * @category Instructions
 * @category Buy
 * @category generated
 */
export const buyStruct = new beet.BeetArgsStruct<
  BuyInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['tradeHistoryBump', beet.u8],
    ['vaultOwnerBump', beet.u8],
  ],
  'BuyInstructionArgs',
);
/**
 * Accounts required by the _buy_ instruction
 *
 * @property [_writable_] market
 * @property [_writable_] sellingResource
 * @property [_writable_] userTokenAccount
 * @property [_writable_, **signer**] userWallet
 * @property [_writable_] tradeHistory
 * @property [_writable_] treasuryHolder
 * @property [_writable_] newMetadata
 * @property [_writable_] newEdition
 * @property [_writable_] masterEdition
 * @property [_writable_] newMint
 * @property [_writable_] editionMarker
 * @property [_writable_] vault
 * @property [] owner
 * @property [_writable_] newTokenAccount
 * @property [_writable_] masterEditionMetadata
 * @property [] clock
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category Buy
 * @category generated
 */
export type BuyInstructionAccounts = {
  market: web3.PublicKey;
  sellingResource: web3.PublicKey;
  userTokenAccount: web3.PublicKey;
  userWallet: web3.PublicKey;
  tradeHistory: web3.PublicKey;
  treasuryHolder: web3.PublicKey;
  newMetadata: web3.PublicKey;
  newEdition: web3.PublicKey;
  masterEdition: web3.PublicKey;
  newMint: web3.PublicKey;
  editionMarker: web3.PublicKey;
  vault: web3.PublicKey;
  owner: web3.PublicKey;
  newTokenAccount: web3.PublicKey;
  masterEditionMetadata: web3.PublicKey;
  clock: web3.PublicKey;
  rent?: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const buyInstructionDiscriminator = [102, 6, 61, 18, 1, 218, 235, 234];

/**
 * Creates a _Buy_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Buy
 * @category generated
 */
export function createBuyInstruction(
  accounts: BuyInstructionAccounts,
  args: BuyInstructionArgs,
  programId = new web3.PublicKey('SaLeTjyUa5wXHnGuewUSyJ5JWZaHwz3TxqUntCE9czo'),
) {
  const [data] = buyStruct.serialize({
    instructionDiscriminator: buyInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sellingResource,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userWallet,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tradeHistory,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryHolder,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.masterEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.editionMarker,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.newTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.masterEditionMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
