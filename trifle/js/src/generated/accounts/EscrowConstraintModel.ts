/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { Key, keyBeet } from '../types/Key';
import { EscrowConstraint, escrowConstraintBeet } from '../types/EscrowConstraint';
import { RoyaltyModel, royaltyModelBeet } from '../types/RoyaltyModel';

/**
 * Arguments used to create {@link EscrowConstraintModel}
 * @category Accounts
 * @category generated
 */
export type EscrowConstraintModelArgs = {
  key: Key;
  creator: web3.PublicKey;
  name: string;
  constraints: Map<string, EscrowConstraint>;
  updateAuthority: web3.PublicKey;
  count: beet.bignum;
  schemaUri: beet.COption<string>;
  royalties: RoyaltyModel;
  royaltyBalance: beet.bignum;
};
/**
 * Holds the data for the {@link EscrowConstraintModel} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class EscrowConstraintModel implements EscrowConstraintModelArgs {
  private constructor(
    readonly key: Key,
    readonly creator: web3.PublicKey,
    readonly name: string,
    readonly constraints: Map<string, EscrowConstraint>,
    readonly updateAuthority: web3.PublicKey,
    readonly count: beet.bignum,
    readonly schemaUri: beet.COption<string>,
    readonly royalties: RoyaltyModel,
    readonly royaltyBalance: beet.bignum,
  ) {}

  /**
   * Creates a {@link EscrowConstraintModel} instance from the provided args.
   */
  static fromArgs(args: EscrowConstraintModelArgs) {
    return new EscrowConstraintModel(
      args.key,
      args.creator,
      args.name,
      args.constraints,
      args.updateAuthority,
      args.count,
      args.schemaUri,
      args.royalties,
      args.royaltyBalance,
    );
  }

  /**
   * Deserializes the {@link EscrowConstraintModel} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [EscrowConstraintModel, number] {
    return EscrowConstraintModel.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link EscrowConstraintModel} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<EscrowConstraintModel> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find EscrowConstraintModel account at ${address}`);
    }
    return EscrowConstraintModel.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('6PLSD84fn6MVb3XdPYAiX33X8jgfCPXeqYUmfnYndU3X'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, escrowConstraintModelBeet);
  }

  /**
   * Deserializes the {@link EscrowConstraintModel} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [EscrowConstraintModel, number] {
    return escrowConstraintModelBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link EscrowConstraintModel} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return escrowConstraintModelBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link EscrowConstraintModel} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: EscrowConstraintModelArgs) {
    const instance = EscrowConstraintModel.fromArgs(args);
    return escrowConstraintModelBeet.toFixedFromValue(instance).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link EscrowConstraintModel} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: EscrowConstraintModelArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      EscrowConstraintModel.byteSize(args),
      commitment,
    );
  }

  /**
   * Returns a readable version of {@link EscrowConstraintModel} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      key: 'Key.' + Key[this.key],
      creator: this.creator.toBase58(),
      name: this.name,
      constraints: this.constraints,
      updateAuthority: this.updateAuthority.toBase58(),
      count: (() => {
        const x = <{ toNumber: () => number }>this.count;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      schemaUri: this.schemaUri,
      royalties: this.royalties,
      royaltyBalance: (() => {
        const x = <{ toNumber: () => number }>this.royaltyBalance;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const escrowConstraintModelBeet = new beet.FixableBeetStruct<
  EscrowConstraintModel,
  EscrowConstraintModelArgs
>(
  [
    ['key', keyBeet],
    ['creator', beetSolana.publicKey],
    ['name', beet.utf8String],
    ['constraints', beet.map(beet.utf8String, escrowConstraintBeet)],
    ['updateAuthority', beetSolana.publicKey],
    ['count', beet.u64],
    ['schemaUri', beet.coption(beet.utf8String)],
    ['royalties', royaltyModelBeet],
    ['royaltyBalance', beet.u64],
  ],
  EscrowConstraintModel.fromArgs,
  'EscrowConstraintModel',
);
