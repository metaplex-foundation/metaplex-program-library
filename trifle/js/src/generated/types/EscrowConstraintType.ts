/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
/**
 * This type is used to derive the {@link EscrowConstraintType} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link EscrowConstraintType} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type EscrowConstraintTypeRecord = {
  None: void /* scalar variant */;
  Collection: { fields: [web3.PublicKey] };
  Tokens: { fields: [Set<web3.PublicKey>] };
};

/**
 * Union type respresenting the EscrowConstraintType data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isEscrowConstraintType*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type EscrowConstraintType = beet.DataEnumKeyAsKind<EscrowConstraintTypeRecord>;

export const isEscrowConstraintTypeNone = (
  x: EscrowConstraintType,
): x is EscrowConstraintType & { __kind: 'None' } => x.__kind === 'None';
export const isEscrowConstraintTypeCollection = (
  x: EscrowConstraintType,
): x is EscrowConstraintType & { __kind: 'Collection' } => x.__kind === 'Collection';
export const isEscrowConstraintTypeTokens = (
  x: EscrowConstraintType,
): x is EscrowConstraintType & { __kind: 'Tokens' } => x.__kind === 'Tokens';

/**
 * @category userTypes
 * @category generated
 */
export const escrowConstraintTypeBeet = beet.dataEnum<EscrowConstraintTypeRecord>([
  ['None', beet.unit],
  [
    'Collection',
    new beet.BeetArgsStruct<EscrowConstraintTypeRecord['Collection']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'EscrowConstraintTypeRecord["Collection"]',
    ),
  ],
  [
    'Tokens',
    new beet.FixableBeetArgsStruct<EscrowConstraintTypeRecord['Tokens']>(
      [['fields', beet.tuple([beet.set(beetSolana.publicKey)])]],
      'EscrowConstraintTypeRecord["Tokens"]',
    ),
  ],
]) as beet.FixableBeet<EscrowConstraintType>;
