/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { TransferInArgs, transferInArgsBeet } from '../types/TransferInArgs';

/**
 * @category Instructions
 * @category TransferIn
 * @category generated
 */
export type TransferInInstructionArgs = {
  transferInArgs: TransferInArgs;
};
/**
 * @category Instructions
 * @category TransferIn
 * @category generated
 */
export const TransferInStruct = new beet.FixableBeetArgsStruct<
  TransferInInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['transferInArgs', transferInArgsBeet],
  ],
  'TransferInInstructionArgs',
);
/**
 * Accounts required by the _TransferIn_ instruction
 *
 * @property [_writable_] trifle The trifle account to use
 * @property [_writable_, **signer**] trifleAuthority Trifle Authority - the account that can sign transactions for the trifle account
 * @property [_writable_, **signer**] payer Wallet paying for the transaction
 * @property [_writable_] constraintModel The escrow constraint model of the Trifle account
 * @property [] escrow The escrow account of the Trifle account
 * @property [] escrowMint (optional) The escrow account's base token mint
 * @property [_writable_] escrowToken (optional) The token account of the escrow account's base token
 * @property [_writable_] escrowEdition (optional) The freeze authority of the escrow account's base token mint
 * @property [_writable_] attributeMint (optional) The mint of the attribute token
 * @property [_writable_] attributeSrcToken (optional) The token account that the attribute token is being transferred from
 * @property [_writable_] attributeDstToken (optional) The token account that the attribute token is being transferred to (pda of the escrow account)
 * @property [_writable_] attributeMetadata (optional) The metadata account of the attribute token
 * @property [_writable_] attributeEdition (optional) The edition account of the attribute token
 * @property [_writable_] attributeCollectionMetadata (optional) The collection metadata account of the attribute token
 * @property [] splToken Token program
 * @property [] splAssociatedTokenAccount Associated token account program
 * @property [] tokenMetadataProgram Token Metadata program
 * @category Instructions
 * @category TransferIn
 * @category generated
 */
export type TransferInInstructionAccounts = {
  trifle: web3.PublicKey;
  trifleAuthority: web3.PublicKey;
  payer: web3.PublicKey;
  constraintModel: web3.PublicKey;
  escrow: web3.PublicKey;
  escrowMint?: web3.PublicKey;
  escrowToken?: web3.PublicKey;
  escrowEdition?: web3.PublicKey;
  attributeMint?: web3.PublicKey;
  attributeSrcToken?: web3.PublicKey;
  attributeDstToken?: web3.PublicKey;
  attributeMetadata?: web3.PublicKey;
  attributeEdition?: web3.PublicKey;
  attributeCollectionMetadata?: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  splToken: web3.PublicKey;
  splAssociatedTokenAccount: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
};

export const transferInInstructionDiscriminator = 2;

/**
 * Creates a _TransferIn_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category TransferIn
 * @category generated
 */
export function createTransferInInstruction(
  accounts: TransferInInstructionAccounts,
  args: TransferInInstructionArgs,
  programId = new web3.PublicKey('trifMWutwBxkSuatmpPVnEe7NoE3BJKgjVi8sSyoXWX'),
) {
  const [data] = TransferInStruct.serialize({
    instructionDiscriminator: transferInInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.trifle,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.trifleAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.constraintModel,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrow,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowMint ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowToken ?? programId,
      isWritable: accounts.escrowToken != null,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowEdition ?? programId,
      isWritable: accounts.escrowEdition != null,
      isSigner: false,
    },
    {
      pubkey: accounts.attributeMint ?? programId,
      isWritable: accounts.attributeMint != null,
      isSigner: false,
    },
    {
      pubkey: accounts.attributeSrcToken ?? programId,
      isWritable: accounts.attributeSrcToken != null,
      isSigner: false,
    },
    {
      pubkey: accounts.attributeDstToken ?? programId,
      isWritable: accounts.attributeDstToken != null,
      isSigner: false,
    },
    {
      pubkey: accounts.attributeMetadata ?? programId,
      isWritable: accounts.attributeMetadata != null,
      isSigner: false,
    },
    {
      pubkey: accounts.attributeEdition ?? programId,
      isWritable: accounts.attributeEdition != null,
      isSigner: false,
    },
    {
      pubkey: accounts.attributeCollectionMetadata ?? programId,
      isWritable: accounts.attributeCollectionMetadata != null,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.splToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.splAssociatedTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
