/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { TransferInArgs, transferInArgsBeet } from '../types/TransferInArgs';

/**
 * @category Instructions
 * @category TransferIn
 * @category generated
 */
export type TransferInInstructionArgs = {
  transferInArgs: TransferInArgs;
};
/**
 * @category Instructions
 * @category TransferIn
 * @category generated
 */
export const TransferInStruct = new beet.FixableBeetArgsStruct<
  TransferInInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['transferInArgs', transferInArgsBeet],
  ],
  'TransferInInstructionArgs',
);
/**
 * Accounts required by the _TransferIn_ instruction
 *
 * @property [_writable_] trifle The trifle account to use
 * @property [_writable_, **signer**] trifleAuthority Trifle Authority - the account that can sign transactions for the trifle account
 * @property [_writable_, **signer**] payer Wallet paying for the transaction
 * @property [] constraintModel The escrow constraint model of the Trifle account
 * @property [] escrow The escrow account of the Trifle account
 * @property [] escrowMint (optional) The escrow account's base token mint
 * @property [_writable_] escrowToken (optional) The token account of the escrow account's base token
 * @property [_writable_] escrowEdition (optional) The freeze authority of the escrow account's base token mint
 * @property [_writable_] attributeMint (optional) The mint of the attribute token
 * @property [_writable_] attributeSrcToken (optional) The token account that the attribute token is being transferred from
 * @property [_writable_] attributeDstToken (optional) The token account that the attribute token is being transferred to (pda of the escrow account)
 * @property [_writable_] attributeMetadata (optional) The metadata account of the attribute token
 * @property [_writable_] attributeEdition (optional) The edition account of the attribute token
 * @property [_writable_] attributeCollectionMetadata (optional) The collection metadata account of the attribute token
 * @category Instructions
 * @category TransferIn
 * @category generated
 */
export type TransferInInstructionAccounts = {
  trifle: web3.PublicKey;
  trifleAuthority: web3.PublicKey;
  payer: web3.PublicKey;
  constraintModel: web3.PublicKey;
  escrow: web3.PublicKey;
  escrowMint?: web3.PublicKey;
  escrowToken?: web3.PublicKey;
  escrowEdition?: web3.PublicKey;
  attributeMint?: web3.PublicKey;
  attributeSrcToken?: web3.PublicKey;
  attributeDstToken?: web3.PublicKey;
  attributeMetadata?: web3.PublicKey;
  attributeEdition?: web3.PublicKey;
  attributeCollectionMetadata?: web3.PublicKey;
};

export const transferInInstructionDiscriminator = 2;

/**
 * Creates a _TransferIn_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category TransferIn
 * @category generated
 */
export function createTransferInInstruction(
  accounts: TransferInInstructionAccounts,
  args: TransferInInstructionArgs,
  programId = new web3.PublicKey('6PLSD84fn6MVb3XdPYAiX33X8jgfCPXeqYUmfnYndU3X'),
) {
  const [data] = TransferInStruct.serialize({
    instructionDiscriminator: transferInInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.trifle,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.trifleAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.constraintModel,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.escrow,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.escrowMint != null) {
    keys.push({
      pubkey: accounts.escrowMint,
      isWritable: false,
      isSigner: false,
    });
  }

  if (accounts.escrowToken != null) {
    if (accounts.escrowMint == null) {
      throw new Error(
        "When providing 'escrowToken' then 'accounts.escrowMint' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.escrowToken,
      isWritable: true,
      isSigner: false,
    });
  }

  if (accounts.escrowEdition != null) {
    if (accounts.escrowMint == null || accounts.escrowToken == null) {
      throw new Error(
        "When providing 'escrowEdition' then 'accounts.escrowMint', 'accounts.escrowToken' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.escrowEdition,
      isWritable: true,
      isSigner: false,
    });
  }

  if (accounts.attributeMint != null) {
    if (
      accounts.escrowMint == null ||
      accounts.escrowToken == null ||
      accounts.escrowEdition == null
    ) {
      throw new Error(
        "When providing 'attributeMint' then 'accounts.escrowMint', 'accounts.escrowToken', 'accounts.escrowEdition' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.attributeMint,
      isWritable: true,
      isSigner: false,
    });
  }

  if (accounts.attributeSrcToken != null) {
    if (
      accounts.escrowMint == null ||
      accounts.escrowToken == null ||
      accounts.escrowEdition == null ||
      accounts.attributeMint == null
    ) {
      throw new Error(
        "When providing 'attributeSrcToken' then 'accounts.escrowMint', 'accounts.escrowToken', 'accounts.escrowEdition', 'accounts.attributeMint' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.attributeSrcToken,
      isWritable: true,
      isSigner: false,
    });
  }

  if (accounts.attributeDstToken != null) {
    if (
      accounts.escrowMint == null ||
      accounts.escrowToken == null ||
      accounts.escrowEdition == null ||
      accounts.attributeMint == null ||
      accounts.attributeSrcToken == null
    ) {
      throw new Error(
        "When providing 'attributeDstToken' then 'accounts.escrowMint', 'accounts.escrowToken', 'accounts.escrowEdition', 'accounts.attributeMint', 'accounts.attributeSrcToken' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.attributeDstToken,
      isWritable: true,
      isSigner: false,
    });
  }

  if (accounts.attributeMetadata != null) {
    if (
      accounts.escrowMint == null ||
      accounts.escrowToken == null ||
      accounts.escrowEdition == null ||
      accounts.attributeMint == null ||
      accounts.attributeSrcToken == null ||
      accounts.attributeDstToken == null
    ) {
      throw new Error(
        "When providing 'attributeMetadata' then 'accounts.escrowMint', 'accounts.escrowToken', 'accounts.escrowEdition', 'accounts.attributeMint', 'accounts.attributeSrcToken', 'accounts.attributeDstToken' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.attributeMetadata,
      isWritable: true,
      isSigner: false,
    });
  }

  if (accounts.attributeEdition != null) {
    if (
      accounts.escrowMint == null ||
      accounts.escrowToken == null ||
      accounts.escrowEdition == null ||
      accounts.attributeMint == null ||
      accounts.attributeSrcToken == null ||
      accounts.attributeDstToken == null ||
      accounts.attributeMetadata == null
    ) {
      throw new Error(
        "When providing 'attributeEdition' then 'accounts.escrowMint', 'accounts.escrowToken', 'accounts.escrowEdition', 'accounts.attributeMint', 'accounts.attributeSrcToken', 'accounts.attributeDstToken', 'accounts.attributeMetadata' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.attributeEdition,
      isWritable: true,
      isSigner: false,
    });
  }

  if (accounts.attributeCollectionMetadata != null) {
    if (
      accounts.escrowMint == null ||
      accounts.escrowToken == null ||
      accounts.escrowEdition == null ||
      accounts.attributeMint == null ||
      accounts.attributeSrcToken == null ||
      accounts.attributeDstToken == null ||
      accounts.attributeMetadata == null ||
      accounts.attributeEdition == null
    ) {
      throw new Error(
        "When providing 'attributeCollectionMetadata' then 'accounts.escrowMint', 'accounts.escrowToken', 'accounts.escrowEdition', 'accounts.attributeMint', 'accounts.attributeSrcToken', 'accounts.attributeDstToken', 'accounts.attributeMetadata', 'accounts.attributeEdition' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.attributeCollectionMetadata,
      isWritable: true,
      isSigner: false,
    });
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
