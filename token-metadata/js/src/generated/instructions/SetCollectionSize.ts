/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { SetCollectionSizeArgs, setCollectionSizeArgsBeet } from '../types/SetCollectionSizeArgs';

/**
 * @category Instructions
 * @category SetCollectionSize
 * @category generated
 */
export type SetCollectionSizeInstructionArgs = {
  setCollectionSizeArgs: SetCollectionSizeArgs;
};
/**
 * @category Instructions
 * @category SetCollectionSize
 * @category generated
 */
export const SetCollectionSizeStruct = new beet.BeetArgsStruct<
  SetCollectionSizeInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['setCollectionSizeArgs', setCollectionSizeArgsBeet],
  ],
  'SetCollectionSizeInstructionArgs',
);
/**
 * Accounts required by the _SetCollectionSize_ instruction
 *
 * @property [_writable_] collectionMetadata Collection Metadata account
 * @property [_writable_, **signer**] collectionAuthority Collection Update authority
 * @property [] collectionMint Mint of the Collection
 * @category Instructions
 * @category SetCollectionSize
 * @category generated
 */
export type SetCollectionSizeInstructionAccounts = {
  collectionMetadata: web3.PublicKey;
  collectionAuthority: web3.PublicKey;
  collectionMint: web3.PublicKey;
};

export const setCollectionSizeInstructionDiscriminator = 34;

/**
 * Creates a _SetCollectionSize_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetCollectionSize
 * @category generated
 */
export function createSetCollectionSizeInstruction(
  accounts: SetCollectionSizeInstructionAccounts,
  args: SetCollectionSizeInstructionArgs,
) {
  const { collectionMetadata, collectionAuthority, collectionMint } = accounts;

  const [data] = SetCollectionSizeStruct.serialize({
    instructionDiscriminator: setCollectionSizeInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: collectionMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: collectionAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: collectionMint,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'),
    keys,
    data,
  });
  return ix;
}
