/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import { ProgrammableConfig, programmableConfigBeet } from './ProgrammableConfig';
/**
 * This type is used to derive the {@link ProgrammableConfigOpt} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ProgrammableConfigOpt} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ProgrammableConfigOptRecord = {
  Some: { fields: [ProgrammableConfig] };
  None: void /* scalar variant */;
  Unchanged: void /* scalar variant */;
};

/**
 * Union type respresenting the ProgrammableConfigOpt data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isProgrammableConfigOpt*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ProgrammableConfigOpt = beet.DataEnumKeyAsKind<ProgrammableConfigOptRecord>;

export const isProgrammableConfigOptSome = (
  x: ProgrammableConfigOpt,
): x is ProgrammableConfigOpt & { __kind: 'Some' } => x.__kind === 'Some';
export const isProgrammableConfigOptNone = (
  x: ProgrammableConfigOpt,
): x is ProgrammableConfigOpt & { __kind: 'None' } => x.__kind === 'None';
export const isProgrammableConfigOptUnchanged = (
  x: ProgrammableConfigOpt,
): x is ProgrammableConfigOpt & { __kind: 'Unchanged' } => x.__kind === 'Unchanged';

/**
 * @category userTypes
 * @category generated
 */
export const programmableConfigOptBeet = beet.dataEnum<ProgrammableConfigOptRecord>([
  [
    'Some',
    new beet.BeetArgsStruct<ProgrammableConfigOptRecord['Some']>(
      [['fields', beet.fixedSizeTuple([programmableConfigBeet])]],
      'ProgrammableConfigOptRecord["Some"]',
    ),
  ],
  ['None', beet.unit],
  ['Unchanged', beet.unit],
]) as beet.FixableBeet<ProgrammableConfigOpt, ProgrammableConfigOpt>;
