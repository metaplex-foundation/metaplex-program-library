/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import { AuthorizationData, authorizationDataBeet } from './AuthorizationData';
/**
 * This type is used to derive the {@link UtilityArgs} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link UtilityArgs} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type UtilityArgsRecord = {
  LockV1: { authorizationData: beet.COption<AuthorizationData> };
  UnlockV1: { authorizationData: beet.COption<AuthorizationData> };
};

/**
 * Union type respresenting the UtilityArgs data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isUtilityArgs*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type UtilityArgs = beet.DataEnumKeyAsKind<UtilityArgsRecord>;

export const isUtilityArgsLockV1 = (x: UtilityArgs): x is UtilityArgs & { __kind: 'LockV1' } =>
  x.__kind === 'LockV1';
export const isUtilityArgsUnlockV1 = (x: UtilityArgs): x is UtilityArgs & { __kind: 'UnlockV1' } =>
  x.__kind === 'UnlockV1';

/**
 * @category userTypes
 * @category generated
 */
export const utilityArgsBeet = beet.dataEnum<UtilityArgsRecord>([
  [
    'LockV1',
    new beet.FixableBeetArgsStruct<UtilityArgsRecord['LockV1']>(
      [['authorizationData', beet.coption(authorizationDataBeet)]],
      'UtilityArgsRecord["LockV1"]',
    ),
  ],

  [
    'UnlockV1',
    new beet.FixableBeetArgsStruct<UtilityArgsRecord['UnlockV1']>(
      [['authorizationData', beet.coption(authorizationDataBeet)]],
      'UtilityArgsRecord["UnlockV1"]',
    ),
  ],
]) as beet.FixableBeet<UtilityArgs, UtilityArgs>;
