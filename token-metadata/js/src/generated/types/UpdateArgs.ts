/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { AuthorizationData, authorizationDataBeet } from './AuthorizationData';
import { Data, dataBeet } from './Data';
import { TokenStandard, tokenStandardBeet } from './TokenStandard';
import { Collection, collectionBeet } from './Collection';
import { Uses, usesBeet } from './Uses';
import { CollectionDetails, collectionDetailsBeet } from './CollectionDetails';
import { ProgrammableConfig, programmableConfigBeet } from './ProgrammableConfig';
import { DelegateState, delegateStateBeet } from './DelegateState';
import { AuthorityType, authorityTypeBeet } from './AuthorityType';
/**
 * This type is used to derive the {@link UpdateArgs} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link UpdateArgs} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type UpdateArgsRecord = {
  V1: {
    authorizationData: beet.COption<AuthorizationData>;
    newUpdateAuthority: beet.COption<web3.PublicKey>;
    data: beet.COption<Data>;
    primarySaleHappened: beet.COption<boolean>;
    isMutable: beet.COption<boolean>;
    tokenStandard: beet.COption<TokenStandard>;
    collection: beet.COption<Collection>;
    uses: beet.COption<Uses>;
    collectionDetails: beet.COption<CollectionDetails>;
    programmableConfig: beet.COption<ProgrammableConfig>;
    delegateState: beet.COption<DelegateState>;
    authorityType: AuthorityType;
  };
};

/**
 * Union type respresenting the UpdateArgs data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isUpdateArgs*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type UpdateArgs = beet.DataEnumKeyAsKind<UpdateArgsRecord>;

export const isUpdateArgsV1 = (x: UpdateArgs): x is UpdateArgs & { __kind: 'V1' } =>
  x.__kind === 'V1';

/**
 * @category userTypes
 * @category generated
 */
export const updateArgsBeet = beet.dataEnum<UpdateArgsRecord>([
  [
    'V1',
    new beet.FixableBeetArgsStruct<UpdateArgsRecord['V1']>(
      [
        ['authorizationData', beet.coption(authorizationDataBeet)],
        ['newUpdateAuthority', beet.coption(beetSolana.publicKey)],
        ['data', beet.coption(dataBeet)],
        ['primarySaleHappened', beet.coption(beet.bool)],
        ['isMutable', beet.coption(beet.bool)],
        ['tokenStandard', beet.coption(tokenStandardBeet)],
        ['collection', beet.coption(collectionBeet)],
        ['uses', beet.coption(usesBeet)],
        ['collectionDetails', beet.coption(collectionDetailsBeet)],
        ['programmableConfig', beet.coption(programmableConfigBeet)],
        ['delegateState', beet.coption(delegateStateBeet)],
        ['authorityType', authorityTypeBeet],
      ],
      'UpdateArgsRecord["V1"]',
    ),
  ],
]) as beet.FixableBeet<UpdateArgs, UpdateArgs>;
