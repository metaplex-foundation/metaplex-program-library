/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { Data, dataBeet } from './Data';
import { CollectionToggle, collectionToggleBeet } from './CollectionToggle';
import { CollectionDetailsToggle, collectionDetailsToggleBeet } from './CollectionDetailsToggle';
import { UsesToggle, usesToggleBeet } from './UsesToggle';
import { RuleSetToggle, ruleSetToggleBeet } from './RuleSetToggle';
import { AuthorizationData, authorizationDataBeet } from './AuthorizationData';
/**
 * This type is used to derive the {@link UpdateArgs} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link UpdateArgs} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type UpdateArgsRecord = {
  V1: {
    newUpdateAuthority: beet.COption<web3.PublicKey>;
    data: beet.COption<Data>;
    primarySaleHappened: beet.COption<boolean>;
    isMutable: beet.COption<boolean>;
    collection: CollectionToggle;
    collectionDetails: CollectionDetailsToggle;
    uses: UsesToggle;
    ruleSet: RuleSetToggle;
    authorizationData: beet.COption<AuthorizationData>;
  };
};

/**
 * Union type respresenting the UpdateArgs data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isUpdateArgs*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type UpdateArgs = beet.DataEnumKeyAsKind<UpdateArgsRecord>;

export const isUpdateArgsV1 = (x: UpdateArgs): x is UpdateArgs & { __kind: 'V1' } =>
  x.__kind === 'V1';

/**
 * @category userTypes
 * @category generated
 */
export const updateArgsBeet = beet.dataEnum<UpdateArgsRecord>([
  [
    'V1',
    new beet.FixableBeetArgsStruct<UpdateArgsRecord['V1']>(
      [
        ['newUpdateAuthority', beet.coption(beetSolana.publicKey)],
        ['data', beet.coption(dataBeet)],
        ['primarySaleHappened', beet.coption(beet.bool)],
        ['isMutable', beet.coption(beet.bool)],
        ['collection', collectionToggleBeet],
        ['collectionDetails', collectionDetailsToggleBeet],
        ['uses', usesToggleBeet],
        ['ruleSet', ruleSetToggleBeet],
        ['authorizationData', beet.coption(authorizationDataBeet)],
      ],
      'UpdateArgsRecord["V1"]',
    ),
  ],
]) as beet.FixableBeet<UpdateArgs, UpdateArgs>;
