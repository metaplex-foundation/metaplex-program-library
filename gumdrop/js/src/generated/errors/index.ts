/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * InvalidProof: 'Invalid Merkle proof.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProofError extends Error {
  readonly code: number = 0x1770;
  readonly name: string = 'InvalidProof';
  constructor() {
    super('Invalid Merkle proof.');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProofError);
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidProofError());
createErrorFromNameLookup.set('InvalidProof', () => new InvalidProofError());

/**
 * DropAlreadyClaimed: 'Drop already claimed.'
 *
 * @category Errors
 * @category generated
 */
export class DropAlreadyClaimedError extends Error {
  readonly code: number = 0x1771;
  readonly name: string = 'DropAlreadyClaimed';
  constructor() {
    super('Drop already claimed.');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DropAlreadyClaimedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new DropAlreadyClaimedError());
createErrorFromNameLookup.set('DropAlreadyClaimed', () => new DropAlreadyClaimedError());

/**
 * Unauthorized: 'Account is not authorized to execute this instruction'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1772;
  readonly name: string = 'Unauthorized';
  constructor() {
    super('Account is not authorized to execute this instruction');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new UnauthorizedError());
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError());

/**
 * OwnerMismatch: 'Token account owner did not match intended owner'
 *
 * @category Errors
 * @category generated
 */
export class OwnerMismatchError extends Error {
  readonly code: number = 0x1773;
  readonly name: string = 'OwnerMismatch';
  constructor() {
    super('Token account owner did not match intended owner');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OwnerMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new OwnerMismatchError());
createErrorFromNameLookup.set('OwnerMismatch', () => new OwnerMismatchError());

/**
 * TemporalMismatch: 'Temporal signer did not match distributor'
 *
 * @category Errors
 * @category generated
 */
export class TemporalMismatchError extends Error {
  readonly code: number = 0x1774;
  readonly name: string = 'TemporalMismatch';
  constructor() {
    super('Temporal signer did not match distributor');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TemporalMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new TemporalMismatchError());
createErrorFromNameLookup.set('TemporalMismatch', () => new TemporalMismatchError());

/**
 * NumericalOverflow: 'Numerical Overflow'
 *
 * @category Errors
 * @category generated
 */
export class NumericalOverflowError extends Error {
  readonly code: number = 0x1775;
  readonly name: string = 'NumericalOverflow';
  constructor() {
    super('Numerical Overflow');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericalOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new NumericalOverflowError());
createErrorFromNameLookup.set('NumericalOverflow', () => new NumericalOverflowError());

/**
 * InvalidClaimBump: 'Invalid Claim Bump'
 *
 * @category Errors
 * @category generated
 */
export class InvalidClaimBumpError extends Error {
  readonly code: number = 0x1776;
  readonly name: string = 'InvalidClaimBump';
  constructor() {
    super('Invalid Claim Bump');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidClaimBumpError);
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidClaimBumpError());
createErrorFromNameLookup.set('InvalidClaimBump', () => new InvalidClaimBumpError());

/**
 * MustUseOfficialCandyMachine: 'Gumdrop only supports the official Metaplex Candy machine contracts'
 *
 * @category Errors
 * @category generated
 */
export class MustUseOfficialCandyMachineError extends Error {
  readonly code: number = 0x1777;
  readonly name: string = 'MustUseOfficialCandyMachine';
  constructor() {
    super('Gumdrop only supports the official Metaplex Candy machine contracts');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MustUseOfficialCandyMachineError);
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new MustUseOfficialCandyMachineError());
createErrorFromNameLookup.set(
  'MustUseOfficialCandyMachine',
  () => new MustUseOfficialCandyMachineError(),
);

/**
 * BumpSeedNotInHashMap: 'Bump seed not in hash map'
 *
 * @category Errors
 * @category generated
 */
export class BumpSeedNotInHashMapError extends Error {
  readonly code: number = 0x1778;
  readonly name: string = 'BumpSeedNotInHashMap';
  constructor() {
    super('Bump seed not in hash map');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BumpSeedNotInHashMapError);
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new BumpSeedNotInHashMapError());
createErrorFromNameLookup.set('BumpSeedNotInHashMap', () => new BumpSeedNotInHashMapError());

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}
