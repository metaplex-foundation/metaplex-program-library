/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * @category Instructions
 * @category ProveClaim
 * @category generated
 */
export type ProveClaimInstructionArgs = {
  claimPrefix: Uint8Array;
  claimBump: number;
  index: beet.bignum;
  amount: beet.bignum;
  claimantSecret: web3.PublicKey;
  resource: web3.PublicKey;
  resourceNonce: Uint8Array;
  proof: number[] /* size: 32 */[];
};
/**
 * @category Instructions
 * @category ProveClaim
 * @category generated
 */
export const proveClaimStruct = new beet.FixableBeetArgsStruct<
  ProveClaimInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['claimPrefix', beet.bytes],
    ['claimBump', beet.u8],
    ['index', beet.u64],
    ['amount', beet.u64],
    ['claimantSecret', beetSolana.publicKey],
    ['resource', beetSolana.publicKey],
    ['resourceNonce', beet.bytes],
    ['proof', beet.array(beet.uniformFixedSizeArray(beet.u8, 32))],
  ],
  'ProveClaimInstructionArgs',
);
/**
 * Accounts required by the _proveClaim_ instruction
 *
 * @property [_writable_] distributor
 * @property [_writable_] claimProof
 * @property [**signer**] temporal
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category ProveClaim
 * @category generated
 */
export type ProveClaimInstructionAccounts = {
  distributor: web3.PublicKey;
  claimProof: web3.PublicKey;
  temporal: web3.PublicKey;
  payer: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const proveClaimInstructionDiscriminator = [52, 82, 123, 224, 40, 139, 230, 184];

/**
 * Creates a _ProveClaim_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProveClaim
 * @category generated
 */
export function createProveClaimInstruction(
  accounts: ProveClaimInstructionAccounts,
  args: ProveClaimInstructionArgs,
  programId = new web3.PublicKey('gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'),
) {
  const [data] = proveClaimStruct.serialize({
    instructionDiscriminator: proveClaimInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.distributor,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.claimProof,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.temporal,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
