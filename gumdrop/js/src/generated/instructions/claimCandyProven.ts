/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category ClaimCandyProven
 * @category generated
 */
export type ClaimCandyProvenInstructionArgs = {
  walletBump: number;
  claimBump: number;
  index: beet.bignum;
};
/**
 * @category Instructions
 * @category ClaimCandyProven
 * @category generated
 */
export const claimCandyProvenStruct = new beet.BeetArgsStruct<
  ClaimCandyProvenInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['walletBump', beet.u8],
    ['claimBump', beet.u8],
    ['index', beet.u64],
  ],
  'ClaimCandyProvenInstructionArgs',
);
/**
 * Accounts required by the _claimCandyProven_ instruction
 *
 * @property [_writable_] distributor
 * @property [_writable_] distributorWallet
 * @property [_writable_] claimProof
 * @property [**signer**] payer
 * @property [] candyMachineConfig
 * @property [_writable_] candyMachine
 * @property [_writable_] candyMachineWallet
 * @property [_writable_] candyMachineMint
 * @property [_writable_] candyMachineMetadata
 * @property [_writable_] candyMachineMasterEdition
 * @property [] tokenMetadataProgram
 * @property [] candyMachineProgram
 * @property [] clock
 * @category Instructions
 * @category ClaimCandyProven
 * @category generated
 */
export type ClaimCandyProvenInstructionAccounts = {
  distributor: web3.PublicKey;
  distributorWallet: web3.PublicKey;
  claimProof: web3.PublicKey;
  payer: web3.PublicKey;
  candyMachineConfig: web3.PublicKey;
  candyMachine: web3.PublicKey;
  candyMachineWallet: web3.PublicKey;
  candyMachineMint: web3.PublicKey;
  candyMachineMetadata: web3.PublicKey;
  candyMachineMasterEdition: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
  candyMachineProgram: web3.PublicKey;
  rent?: web3.PublicKey;
  clock: web3.PublicKey;
};

export const claimCandyProvenInstructionDiscriminator = [1, 2, 30, 252, 145, 228, 67, 145];

/**
 * Creates a _ClaimCandyProven_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ClaimCandyProven
 * @category generated
 */
export function createClaimCandyProvenInstruction(
  accounts: ClaimCandyProvenInstructionAccounts,
  args: ClaimCandyProvenInstructionArgs,
  programId = new web3.PublicKey('gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'),
) {
  const [data] = claimCandyProvenStruct.serialize({
    instructionDiscriminator: claimCandyProvenInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.distributor,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.distributorWallet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.claimProof,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.candyMachineConfig,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachine,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachineWallet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachineMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachineMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachineMasterEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachineProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
