/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link ClaimProof}
 * @category Accounts
 * @category generated
 */
export type ClaimProofArgs = {
  amount: beet.bignum;
  count: beet.bignum;
  claimant: web3.PublicKey;
  resource: web3.PublicKey;
  resourceNonce: Uint8Array;
};

export const claimProofDiscriminator = [48, 173, 176, 137, 53, 116, 40, 112];
/**
 * Holds the data for the {@link ClaimProof} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ClaimProof implements ClaimProofArgs {
  private constructor(
    readonly amount: beet.bignum,
    readonly count: beet.bignum,
    readonly claimant: web3.PublicKey,
    readonly resource: web3.PublicKey,
    readonly resourceNonce: Uint8Array,
  ) {}

  /**
   * Creates a {@link ClaimProof} instance from the provided args.
   */
  static fromArgs(args: ClaimProofArgs) {
    return new ClaimProof(
      args.amount,
      args.count,
      args.claimant,
      args.resource,
      args.resourceNonce,
    );
  }

  /**
   * Deserializes the {@link ClaimProof} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [ClaimProof, number] {
    return ClaimProof.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ClaimProof} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<ClaimProof> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find ClaimProof account at ${address}`);
    }
    return ClaimProof.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, claimProofBeet);
  }

  /**
   * Deserializes the {@link ClaimProof} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ClaimProof, number] {
    return claimProofBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link ClaimProof} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return claimProofBeet.serialize({
      accountDiscriminator: claimProofDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ClaimProof} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ClaimProofArgs) {
    const instance = ClaimProof.fromArgs(args);
    return claimProofBeet.toFixedFromValue({
      accountDiscriminator: claimProofDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ClaimProof} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ClaimProofArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(ClaimProof.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link ClaimProof} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      amount: (() => {
        const x = <{ toNumber: () => number }>this.amount;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      count: (() => {
        const x = <{ toNumber: () => number }>this.count;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      claimant: this.claimant.toBase58(),
      resource: this.resource.toBase58(),
      resourceNonce: this.resourceNonce,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const claimProofBeet = new beet.FixableBeetStruct<
  ClaimProof,
  ClaimProofArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
    ['count', beet.u64],
    ['claimant', beetSolana.publicKey],
    ['resource', beetSolana.publicKey],
    ['resourceNonce', beet.bytes],
  ],
  ClaimProof.fromArgs,
  'ClaimProof',
);
