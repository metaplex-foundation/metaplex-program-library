/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { MetadataArgs, metadataArgsBeet } from '../types/MetadataArgs'

/**
 * @category Instructions
 * @category VerifyCreator
 * @category generated
 */
export type VerifyCreatorInstructionArgs = {
  root: number[] /* size: 32 */
  dataHash: number[] /* size: 32 */
  creatorHash: number[] /* size: 32 */
  nonce: beet.bignum
  index: number
  message: MetadataArgs
}
/**
 * @category Instructions
 * @category VerifyCreator
 * @category generated
 */
export const verifyCreatorStruct = new beet.FixableBeetArgsStruct<
  VerifyCreatorInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['root', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['dataHash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['creatorHash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['nonce', beet.u64],
    ['index', beet.u32],
    ['message', metadataArgsBeet],
  ],
  'VerifyCreatorInstructionArgs'
)
/**
 * Accounts required by the _verifyCreator_ instruction
 *
 * @property [] authority
 * @property [] owner
 * @property [] delegate
 * @property [**signer**] creator
 * @property [] candyWrapper
 * @property [] gummyrollProgram
 * @property [_writable_] merkleSlab
 * @category Instructions
 * @category VerifyCreator
 * @category generated
 */
export type VerifyCreatorInstructionAccounts = {
  authority: web3.PublicKey
  owner: web3.PublicKey
  delegate: web3.PublicKey
  creator: web3.PublicKey
  candyWrapper: web3.PublicKey
  gummyrollProgram: web3.PublicKey
  merkleSlab: web3.PublicKey
}

export const verifyCreatorInstructionDiscriminator = [
  52, 17, 96, 132, 71, 4, 85, 194,
]

/**
 * Creates a _VerifyCreator_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category VerifyCreator
 * @category generated
 */
export function createVerifyCreatorInstruction(
  accounts: VerifyCreatorInstructionAccounts,
  args: VerifyCreatorInstructionArgs,
  programId = new web3.PublicKey('BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY')
) {
  const [data] = verifyCreatorStruct.serialize({
    instructionDiscriminator: verifyCreatorInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.delegate,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.creator,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.candyWrapper,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.gummyrollProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleSlab,
      isWritable: true,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
