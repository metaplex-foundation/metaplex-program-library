/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RequestMintAuthority
 * @category generated
 */
export type RequestMintAuthorityInstructionArgs = {
  mintCapacity: beet.bignum
}
/**
 * @category Instructions
 * @category RequestMintAuthority
 * @category generated
 */
export const requestMintAuthorityStruct = new beet.BeetArgsStruct<
  RequestMintAuthorityInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['mintCapacity', beet.u64],
  ],
  'RequestMintAuthorityInstructionArgs'
)
/**
 * Accounts required by the _requestMintAuthority_ instruction
 *
 * @property [_writable_] mintAuthorityRequest
 * @property [_writable_, **signer**] payer
 * @property [**signer**] mintAuthority
 * @property [_writable_] treeAuthority
 * @property [] merkleTree
 * @category Instructions
 * @category RequestMintAuthority
 * @category generated
 */
export type RequestMintAuthorityInstructionAccounts = {
  mintAuthorityRequest: web3.PublicKey
  payer: web3.PublicKey
  mintAuthority: web3.PublicKey
  treeAuthority: web3.PublicKey
  systemProgram?: web3.PublicKey
  merkleTree: web3.PublicKey
}

export const requestMintAuthorityInstructionDiscriminator = [
  68, 130, 170, 21, 167, 61, 63, 76,
]

/**
 * Creates a _RequestMintAuthority_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RequestMintAuthority
 * @category generated
 */
export function createRequestMintAuthorityInstruction(
  accounts: RequestMintAuthorityInstructionAccounts,
  args: RequestMintAuthorityInstructionArgs,
  programId = new web3.PublicKey('BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY')
) {
  const [data] = requestMintAuthorityStruct.serialize({
    instructionDiscriminator: requestMintAuthorityInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.mintAuthorityRequest,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mintAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.treeAuthority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleTree,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
