/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link FreezePDA}
 * @category Accounts
 * @category generated
 */
export type FreezePDAArgs = {
  candyMachine: web3.PublicKey;
  allowThaw: boolean;
  frozenCount: beet.bignum;
  mintStart: beet.COption<beet.bignum>;
  freezeTime: beet.bignum;
  freezeFee: beet.bignum;
};

export const freezePDADiscriminator = [154, 58, 148, 24, 101, 200, 243, 127];
/**
 * Holds the data for the {@link FreezePDA} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class FreezePDA implements FreezePDAArgs {
  private constructor(
    readonly candyMachine: web3.PublicKey,
    readonly allowThaw: boolean,
    readonly frozenCount: beet.bignum,
    readonly mintStart: beet.COption<beet.bignum>,
    readonly freezeTime: beet.bignum,
    readonly freezeFee: beet.bignum,
  ) {}

  /**
   * Creates a {@link FreezePDA} instance from the provided args.
   */
  static fromArgs(args: FreezePDAArgs) {
    return new FreezePDA(
      args.candyMachine,
      args.allowThaw,
      args.frozenCount,
      args.mintStart,
      args.freezeTime,
      args.freezeFee,
    );
  }

  /**
   * Deserializes the {@link FreezePDA} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [FreezePDA, number] {
    return FreezePDA.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link FreezePDA} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<FreezePDA> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find FreezePDA account at ${address}`);
    }
    return FreezePDA.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, freezePDABeet);
  }

  /**
   * Deserializes the {@link FreezePDA} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [FreezePDA, number] {
    return freezePDABeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link FreezePDA} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return freezePDABeet.serialize({
      accountDiscriminator: freezePDADiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link FreezePDA} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: FreezePDAArgs) {
    const instance = FreezePDA.fromArgs(args);
    return freezePDABeet.toFixedFromValue({
      accountDiscriminator: freezePDADiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link FreezePDA} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: FreezePDAArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(FreezePDA.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link FreezePDA} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      candyMachine: this.candyMachine.toBase58(),
      allowThaw: this.allowThaw,
      frozenCount: (() => {
        const x = <{ toNumber: () => number }>this.frozenCount;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      mintStart: this.mintStart,
      freezeTime: (() => {
        const x = <{ toNumber: () => number }>this.freezeTime;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      freezeFee: (() => {
        const x = <{ toNumber: () => number }>this.freezeFee;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const freezePDABeet = new beet.FixableBeetStruct<
  FreezePDA,
  FreezePDAArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['candyMachine', beetSolana.publicKey],
    ['allowThaw', beet.bool],
    ['frozenCount', beet.u64],
    ['mintStart', beet.coption(beet.i64)],
    ['freezeTime', beet.i64],
    ['freezeFee', beet.u64],
  ],
  FreezePDA.fromArgs,
  'FreezePDA',
);
