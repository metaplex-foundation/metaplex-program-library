name: Program Auction House

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: stable

jobs:
  setup-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.matrix.outputs.value }}
    steps:
      - id: matrix
        run: |
          sudo apt-get install -y jq && \
          MAINNET=$(curl https://api.mainnet-beta.solana.com -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1, "method":"getVersion"}' | jq '.result["solana-core"]') && \
          TESTNET=$(curl https://api.testnet.solana.com -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1, "method":"getVersion"}' | jq '.result["solana-core"]') && \
          DEVNET=$(curl https://api.devnet.solana.com -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1, "method":"getVersion"}' | jq '.result["solana-core"]') && \
          VERSIONS=($MAINNET $TESTNET $DEVNET) && \
          echo "${VERSIONS[@]}" && \
          VERSION_JSON=$(echo "${VERSIONS[@]}" | jq -s -c) && \
          echo $VERSION_JSON && \
          echo "::set-output name=value::$VERSION_JSON"
        shell: bash
  
  setup-tests:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.matrix.outputs.value }}
    steps:
      - id: matrix
      - uses: actions/checkout@v2
        working-directory: ./auction-house/program
        run: |
          sudo apt-get install -y jq
          ls
          FILES=()
          for FILE in $(ls ./auction-house/program/tests/ | grep rs)
          do
            echo $FILE
            FILES+=(\"$(basename $FILE .rs)\")
          done
          echo "${FILES[@]}"
          FILE_JSON=$(echo "${FILES[@]}" | jq -s -c)
          echo $FILE_JSON
          echo "::set-output name=value::$FILE_JSON"
        shell: bash

  changes:
    needs: [setup-versions, setup-tests]
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      core: ${{ steps.filter.outputs.core }}
      package: ${{ steps.filter.outputs.package }}
    strategy:
      matrix:
        TEST: ${{fromJson(needs.setup-tests.outputs.tests)}}
        SOLANA_VERSION: ${{fromJson(needs.setup-versions.outputs.versions)}}
    steps:
      - uses: actions/checkout@v2
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            core:
              - 'core/**'
            package:
              - 'auction-house/**'
      - name: debug
        id: debug
        working-directory: ./auction-house/program
        run: echo ${{ needs.setup-versions.outputs.versions }}

  build-and-test-auction-house:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.package == 'true' }}
    runs-on: ubuntu-latest
    env:
      cache_id: program-auction-house
      TEST: ${{ matrix.TEST }}
      SOLANA_VERSION: ${{ matrix.SOLANA_VERSION }}
      #SOLANA_VERSION: 1.10.29

    steps:
      # Setup Deps
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-linux-build-deps
      - uses: ./.github/actions/install-solana
        with:
          solana_version: ${{ env.SOLANA_VERSION }}
      - uses: ./.github/actions/install-rust
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      # Restore Cache from previous build/test
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./rust/target
          key:
            ${{ env.cache_id }}-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{
            env.RUSTC_HASH }}

      # Run lint checks
      - uses: ./.github/actions/verify-rust
        with:
          working-directory: ./auction-house/program

      # Build deps
      - uses: ./.github/actions/build-token-metadata

      # Run test
      - name: test-auction-house-program
        id: run_auction_house_test
        working-directory: ./auction-house/program
        run: |
          cargo +${{ env.RUST_TOOLCHAIN }} test -- --nocapture --test-threads 1
          cargo +${{ env.RUST_TOOLCHAIN }} test-bpf --version
          cargo +${{ env.RUST_TOOLCHAIN }} test-bpf --bpf-out-dir ../../target/deploy/ -- --nocapture --test-threads 1
      
      # Verify we didn't break Auctioneer compatibility
      - name: test-auctioneer-program
        id: run_auctioneer_test
        working-directory: ./auctioneer/program
        run: |
          cargo +${{ env.RUST_TOOLCHAIN }} test -- --nocapture --test-threads 1
          cargo +${{ env.RUST_TOOLCHAIN }} test-bpf --version
          cargo +${{ env.RUST_TOOLCHAIN }} test-bpf --bpf-out-dir ../../target/deploy/ --test ${{ env.TEST }} -- --nocapture --test-threads 1
