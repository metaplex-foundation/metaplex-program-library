name: Yarn Install and Build

inputs:
  cache_id:
    description: ID to use in order to cache yarn install
    required: true
  working_dir:
    description: Directory in which to perform the yarn tasks
    required: true

  build_core:
    description: If not false it will build the core package
    required: false
    default: true
  build_auction:
    description: If true it will build the auction package
    required: false
    default: false
  build_token_metadata:
    description: If true it will build the token_metadata package
    required: false
    default: false
  build_token_vault:
    description: If true it will build the token_vault package
    required: false
    default: false
  build_auction_house:
    description: If true it will build the auction_house package
    required: false
    default: false
  build_auction_house_cli:
    description: If true it will build the auction_house CLI package
    required: false
    default: false

runs:
  using: composite
  steps:
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ inputs.cache_id }}-${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

    ##############
    # Prepare Core and Dependencies
    ##############
    
    # All contract SDKs depend on mpl-core so we need to build at least that
    # We avoid running build in the project root to avoid a check for a contract failing due to
    # an issue in another contract which would cause a build failure.
    # For the metaplex contract this is unfortunately not entirely possible as it depends on core, token-metadat,
    # token-vault and auction

    - name: Install and Build core
      if: inputs.build_core == 'true'
      run: |
        echo 'Install and Build core: yarn install'
        yarn install
        echo 'Install and Build core: yarn build'
        yarn build
      working-directory: ./core/js 
      shell: bash

    - name: Install and Build auction
      if: inputs.build_auction == 'true'
      run: |
        echo 'Install and Build auction: yarn install'
        yarn install
        echo 'Install and Build auction: yarn build'
        yarn build
      working-directory: ./auction/js 
      shell: bash

    - name: Install and Build token-metadata
      if: inputs.build_token_metadata == 'true'
      run: |
        echo 'Install and Build token-metadata: yarn install'
        yarn install
        echo 'Install and Build token-metadata: yarn build'
        yarn build
      working-directory: ./token-metadata/js 
      shell: bash

    - name: Install and Build token-vault
      if: inputs.build_token_vault == 'true'
      run: |
        echo 'Install and Build token-vault: yarn install'
        yarn install
        echo 'Install and Build token-vault: yarn build'
        yarn build
      working-directory: ./token-vault/js 
      shell: bash

    - name: Install and Build auction-house
      if: inputs.build_auction_house == 'true'
      run: |
        echo 'Install and Build auction_house: yarn install'
        yarn install
        echo 'Install and Build auction_house: yarn build'
        yarn build
      working-directory: ./auction-house/js 
      shell: bash

    - name: Install and Build auction-house CLI
      if: inputs.build_auction_house_cli == 'true'
      run: |
        echo 'Install and Build auction_house CLI: yarn install'
        yarn install
        echo 'Install and Build auction_house CLI: yarn build'
        yarn build
      working-directory: ./auction-house/cli 
      shell: bash

    ##############
    # Build Contract 
    ##############
    - name: Install modules
      run: yarn install
      working-directory: ${{ inputs.working_dir }}
      shell: bash

    - name: Build TypeScript 
      run: yarn build
      working-directory: ${{ inputs.working_dir }}
      shell: bash
