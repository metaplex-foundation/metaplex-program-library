/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
/**
 * This type is used to derive the {@link CleanUpActions} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link CleanUpActions} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type CleanUpActionsRecord = {
  Change: { fields: [number, number] };
  Sort: void /* scalar variant */;
  None: void /* scalar variant */;
};

/**
 * Union type respresenting the CleanUpActions data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isCleanUpActions*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type CleanUpActions = beet.DataEnumKeyAsKind<CleanUpActionsRecord>;

export const isCleanUpActionsChange = (
  x: CleanUpActions,
): x is CleanUpActions & { __kind: 'Change' } => x.__kind === 'Change';
export const isCleanUpActionsSort = (x: CleanUpActions): x is CleanUpActions & { __kind: 'Sort' } =>
  x.__kind === 'Sort';
export const isCleanUpActionsNone = (x: CleanUpActions): x is CleanUpActions & { __kind: 'None' } =>
  x.__kind === 'None';

/**
 * @category userTypes
 * @category generated
 */
export const cleanUpActionsBeet = beet.dataEnum<CleanUpActionsRecord>([
  [
    'Change',
    new beet.BeetArgsStruct<CleanUpActionsRecord['Change']>(
      [['fields', beet.fixedSizeTuple([beet.u32, beet.u32])]],
      'CleanUpActionsRecord["Change"]',
    ),
  ],
  ['Sort', beet.unit],
  ['None', beet.unit],
]) as beet.FixableBeet<CleanUpActions>;
