/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category DeletePackCard
 * @category generated
 */
export const DeletePackCardStruct = new beet.BeetArgsStruct<{ instructionDiscriminator: number }>(
  [['instructionDiscriminator', beet.u8]],
  'DeletePackCardInstructionArgs',
);
/**
 * Accounts required by the _DeletePackCard_ instruction
 *
 * @property [_writable_] packSet
 * @property [_writable_] packCard
 * @property [**signer**] authority
 * @property [_writable_] refunder
 * @property [_writable_] newMasterEditionOwner
 * @property [_writable_] tokenAccount
 * @property [] programAuthority
 * @category Instructions
 * @category DeletePackCard
 * @category generated
 */
export type DeletePackCardInstructionAccounts = {
  packSet: web3.PublicKey;
  packCard: web3.PublicKey;
  authority: web3.PublicKey;
  refunder: web3.PublicKey;
  newMasterEditionOwner: web3.PublicKey;
  tokenAccount: web3.PublicKey;
  programAuthority: web3.PublicKey;
  rent?: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
};

export const deletePackCardInstructionDiscriminator = 9;

/**
 * Creates a _DeletePackCard_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category DeletePackCard
 * @category generated
 */
export function createDeletePackCardInstruction(
  accounts: DeletePackCardInstructionAccounts,
  programId = new web3.PublicKey('packFeFNZzMfD9aVWL7QbGz1WcU7R9zpf6pvNsw2BLu'),
) {
  const [data] = DeletePackCardStruct.serialize({
    instructionDiscriminator: deletePackCardInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.packSet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.packCard,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.refunder,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newMasterEditionOwner,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.programAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
