/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { EditPackSetArgs, editPackSetArgsBeet } from '../types/EditPackSetArgs';

/**
 * @category Instructions
 * @category EditPack
 * @category generated
 */
export type EditPackInstructionArgs = {
  editPackSetArgs: EditPackSetArgs;
};
/**
 * @category Instructions
 * @category EditPack
 * @category generated
 */
export const EditPackStruct = new beet.FixableBeetArgsStruct<
  EditPackInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['editPackSetArgs', editPackSetArgsBeet],
  ],
  'EditPackInstructionArgs',
);
/**
 * Accounts required by the _EditPack_ instruction
 *
 * @property [_writable_] packSet
 * @property [**signer**] authority
 * @category Instructions
 * @category EditPack
 * @category generated
 */
export type EditPackInstructionAccounts = {
  packSet: web3.PublicKey;
  authority: web3.PublicKey;
};

export const editPackInstructionDiscriminator = 11;

/**
 * Creates a _EditPack_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category EditPack
 * @category generated
 */
export function createEditPackInstruction(
  accounts: EditPackInstructionAccounts,
  args: EditPackInstructionArgs,
  programId = new web3.PublicKey('packFeFNZzMfD9aVWL7QbGz1WcU7R9zpf6pvNsw2BLu'),
) {
  const [data] = EditPackStruct.serialize({
    instructionDiscriminator: editPackInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.packSet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
