/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category Deactivate
 * @category generated
 */
export const DeactivateStruct = new beet.BeetArgsStruct<{ instructionDiscriminator: number }>(
  [['instructionDiscriminator', beet.u8]],
  'DeactivateInstructionArgs',
);
/**
 * Accounts required by the _Deactivate_ instruction
 *
 * @property [_writable_] packSet
 * @property [**signer**] authority
 * @category Instructions
 * @category Deactivate
 * @category generated
 */
export type DeactivateInstructionAccounts = {
  packSet: web3.PublicKey;
  authority: web3.PublicKey;
};

export const deactivateInstructionDiscriminator = 4;

/**
 * Creates a _Deactivate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Deactivate
 * @category generated
 */
export function createDeactivateInstruction(
  accounts: DeactivateInstructionAccounts,
  programId = new web3.PublicKey('packFeFNZzMfD9aVWL7QbGz1WcU7R9zpf6pvNsw2BLu'),
) {
  const [data] = DeactivateStruct.serialize({
    instructionDiscriminator: deactivateInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.packSet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
