/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { AccountType, accountTypeBeet } from '../types/AccountType';
import { PackSetState, packSetStateBeet } from '../types/PackSetState';
import { PackDistributionType, packDistributionTypeBeet } from '../types/PackDistributionType';

/**
 * Arguments used to create {@link PackSet}
 * @category Accounts
 * @category generated
 */
export type PackSetArgs = {
  accountType: AccountType;
  store: web3.PublicKey;
  authority: web3.PublicKey;
  description: string;
  uri: string;
  name: number[] /* size: 32 */;
  packCards: number;
  packVouchers: number;
  totalWeight: beet.bignum;
  totalEditions: beet.bignum;
  mutable: boolean;
  packState: PackSetState;
  distributionType: PackDistributionType;
  allowedAmountToRedeem: number;
  redeemStartDate: beet.bignum;
  redeemEndDate: beet.COption<beet.bignum>;
};
/**
 * Holds the data for the {@link PackSet} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class PackSet implements PackSetArgs {
  private constructor(
    readonly accountType: AccountType,
    readonly store: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly description: string,
    readonly uri: string,
    readonly name: number[] /* size: 32 */,
    readonly packCards: number,
    readonly packVouchers: number,
    readonly totalWeight: beet.bignum,
    readonly totalEditions: beet.bignum,
    readonly mutable: boolean,
    readonly packState: PackSetState,
    readonly distributionType: PackDistributionType,
    readonly allowedAmountToRedeem: number,
    readonly redeemStartDate: beet.bignum,
    readonly redeemEndDate: beet.COption<beet.bignum>,
  ) {}

  /**
   * Creates a {@link PackSet} instance from the provided args.
   */
  static fromArgs(args: PackSetArgs) {
    return new PackSet(
      args.accountType,
      args.store,
      args.authority,
      args.description,
      args.uri,
      args.name,
      args.packCards,
      args.packVouchers,
      args.totalWeight,
      args.totalEditions,
      args.mutable,
      args.packState,
      args.distributionType,
      args.allowedAmountToRedeem,
      args.redeemStartDate,
      args.redeemEndDate,
    );
  }

  /**
   * Deserializes the {@link PackSet} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [PackSet, number] {
    return PackSet.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link PackSet} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<PackSet> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find PackSet account at ${address}`);
    }
    return PackSet.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('packFeFNZzMfD9aVWL7QbGz1WcU7R9zpf6pvNsw2BLu'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, packSetBeet);
  }

  /**
   * Deserializes the {@link PackSet} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [PackSet, number] {
    return packSetBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link PackSet} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return packSetBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link PackSet} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: PackSetArgs) {
    const instance = PackSet.fromArgs(args);
    return packSetBeet.toFixedFromValue(instance).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link PackSet} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: PackSetArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(PackSet.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link PackSet} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType: 'AccountType.' + AccountType[this.accountType],
      store: this.store.toBase58(),
      authority: this.authority.toBase58(),
      description: this.description,
      uri: this.uri,
      name: this.name,
      packCards: this.packCards,
      packVouchers: this.packVouchers,
      totalWeight: (() => {
        const x = <{ toNumber: () => number }>this.totalWeight;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      totalEditions: (() => {
        const x = <{ toNumber: () => number }>this.totalEditions;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      mutable: this.mutable,
      packState: 'PackSetState.' + PackSetState[this.packState],
      distributionType: 'PackDistributionType.' + PackDistributionType[this.distributionType],
      allowedAmountToRedeem: this.allowedAmountToRedeem,
      redeemStartDate: (() => {
        const x = <{ toNumber: () => number }>this.redeemStartDate;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      redeemEndDate: this.redeemEndDate,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const packSetBeet = new beet.FixableBeetStruct<PackSet, PackSetArgs>(
  [
    ['accountType', accountTypeBeet],
    ['store', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['description', beet.utf8String],
    ['uri', beet.utf8String],
    ['name', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['packCards', beet.u32],
    ['packVouchers', beet.u32],
    ['totalWeight', beet.u64],
    ['totalEditions', beet.u64],
    ['mutable', beet.bool],
    ['packState', packSetStateBeet],
    ['distributionType', packDistributionTypeBeet],
    ['allowedAmountToRedeem', beet.u32],
    ['redeemStartDate', beet.u64],
    ['redeemEndDate', beet.coption(beet.u64)],
  ],
  PackSet.fromArgs,
  'PackSet',
);
