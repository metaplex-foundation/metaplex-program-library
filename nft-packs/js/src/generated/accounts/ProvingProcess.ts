/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';
import { AccountType, accountTypeBeet } from '../types/AccountType';

/**
 * Arguments used to create {@link ProvingProcess}
 * @category Accounts
 * @category generated
 */
export type ProvingProcessArgs = {
  accountType: AccountType;
  walletKey: web3.PublicKey;
  isExhausted: boolean;
  voucherMint: web3.PublicKey;
  packSet: web3.PublicKey;
  cardsRedeemed: number;
  cardsToRedeem: Map<number, number>;
};
/**
 * Holds the data for the {@link ProvingProcess} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ProvingProcess implements ProvingProcessArgs {
  private constructor(
    readonly accountType: AccountType,
    readonly walletKey: web3.PublicKey,
    readonly isExhausted: boolean,
    readonly voucherMint: web3.PublicKey,
    readonly packSet: web3.PublicKey,
    readonly cardsRedeemed: number,
    readonly cardsToRedeem: Map<number, number>,
  ) {}

  /**
   * Creates a {@link ProvingProcess} instance from the provided args.
   */
  static fromArgs(args: ProvingProcessArgs) {
    return new ProvingProcess(
      args.accountType,
      args.walletKey,
      args.isExhausted,
      args.voucherMint,
      args.packSet,
      args.cardsRedeemed,
      args.cardsToRedeem,
    );
  }

  /**
   * Deserializes the {@link ProvingProcess} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [ProvingProcess, number] {
    return ProvingProcess.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ProvingProcess} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<ProvingProcess> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find ProvingProcess account at ${address}`);
    }
    return ProvingProcess.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('packFeFNZzMfD9aVWL7QbGz1WcU7R9zpf6pvNsw2BLu'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, provingProcessBeet);
  }

  /**
   * Deserializes the {@link ProvingProcess} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ProvingProcess, number] {
    return provingProcessBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link ProvingProcess} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return provingProcessBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ProvingProcess} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ProvingProcessArgs) {
    const instance = ProvingProcess.fromArgs(args);
    return provingProcessBeet.toFixedFromValue(instance).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ProvingProcess} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ProvingProcessArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(ProvingProcess.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link ProvingProcess} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType: 'AccountType.' + AccountType[this.accountType],
      walletKey: this.walletKey.toBase58(),
      isExhausted: this.isExhausted,
      voucherMint: this.voucherMint.toBase58(),
      packSet: this.packSet.toBase58(),
      cardsRedeemed: this.cardsRedeemed,
      cardsToRedeem: this.cardsToRedeem,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const provingProcessBeet = new beet.FixableBeetStruct<ProvingProcess, ProvingProcessArgs>(
  [
    ['accountType', accountTypeBeet],
    ['walletKey', beetSolana.publicKey],
    ['isExhausted', beet.bool],
    ['voucherMint', beetSolana.publicKey],
    ['packSet', beetSolana.publicKey],
    ['cardsRedeemed', beet.u32],
    ['cardsToRedeem', beet.map(beet.u32, beet.u32)],
  ],
  ProvingProcess.fromArgs,
  'ProvingProcess',
);
