/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';
import { AccountType, accountTypeBeet } from '../types/AccountType';

/**
 * Arguments used to create {@link PackCard}
 * @category Accounts
 * @category generated
 */
export type PackCardArgs = {
  accountType: AccountType;
  packSet: web3.PublicKey;
  master: web3.PublicKey;
  metadata: web3.PublicKey;
  tokenAccount: web3.PublicKey;
  maxSupply: number;
  weight: number;
};
/**
 * Holds the data for the {@link PackCard} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class PackCard implements PackCardArgs {
  private constructor(
    readonly accountType: AccountType,
    readonly packSet: web3.PublicKey,
    readonly master: web3.PublicKey,
    readonly metadata: web3.PublicKey,
    readonly tokenAccount: web3.PublicKey,
    readonly maxSupply: number,
    readonly weight: number,
  ) {}

  /**
   * Creates a {@link PackCard} instance from the provided args.
   */
  static fromArgs(args: PackCardArgs) {
    return new PackCard(
      args.accountType,
      args.packSet,
      args.master,
      args.metadata,
      args.tokenAccount,
      args.maxSupply,
      args.weight,
    );
  }

  /**
   * Deserializes the {@link PackCard} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [PackCard, number] {
    return PackCard.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link PackCard} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<PackCard> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find PackCard account at ${address}`);
    }
    return PackCard.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('packFeFNZzMfD9aVWL7QbGz1WcU7R9zpf6pvNsw2BLu'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, packCardBeet);
  }

  /**
   * Deserializes the {@link PackCard} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [PackCard, number] {
    return packCardBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link PackCard} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return packCardBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link PackCard}
   */
  static get byteSize() {
    return packCardBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link PackCard} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(PackCard.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link PackCard} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === PackCard.byteSize;
  }

  /**
   * Returns a readable version of {@link PackCard} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType: 'AccountType.' + AccountType[this.accountType],
      packSet: this.packSet.toBase58(),
      master: this.master.toBase58(),
      metadata: this.metadata.toBase58(),
      tokenAccount: this.tokenAccount.toBase58(),
      maxSupply: this.maxSupply,
      weight: this.weight,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const packCardBeet = new beet.BeetStruct<PackCard, PackCardArgs>(
  [
    ['accountType', accountTypeBeet],
    ['packSet', beetSolana.publicKey],
    ['master', beetSolana.publicKey],
    ['metadata', beetSolana.publicKey],
    ['tokenAccount', beetSolana.publicKey],
    ['maxSupply', beet.u32],
    ['weight', beet.u16],
  ],
  PackCard.fromArgs,
  'PackCard',
);
