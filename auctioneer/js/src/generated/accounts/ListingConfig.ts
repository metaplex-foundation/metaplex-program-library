/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { ListingConfigVersion, listingConfigVersionBeet } from '../types/ListingConfigVersion';
import { Bid, bidBeet } from '../types/Bid';

/**
 * Arguments used to create {@link ListingConfig}
 * @category Accounts
 * @category generated
 */
export type ListingConfigArgs = {
  version: ListingConfigVersion;
  startTime: beet.bignum;
  endTime: beet.bignum;
  highestBid: Bid;
  bump: number;
  reservePrice: beet.bignum;
  minBidIncrement: beet.bignum;
  timeExtPeriod: number;
  timeExtDelta: number;
  allowHighBidCancel: boolean;
};

const listingConfigDiscriminator = [183, 196, 26, 41, 131, 46, 184, 115];
/**
 * Holds the data for the {@link ListingConfig} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ListingConfig implements ListingConfigArgs {
  private constructor(
    readonly version: ListingConfigVersion,
    readonly startTime: beet.bignum,
    readonly endTime: beet.bignum,
    readonly highestBid: Bid,
    readonly bump: number,
    readonly reservePrice: beet.bignum,
    readonly minBidIncrement: beet.bignum,
    readonly timeExtPeriod: number,
    readonly timeExtDelta: number,
    readonly allowHighBidCancel: boolean,
  ) {}

  /**
   * Creates a {@link ListingConfig} instance from the provided args.
   */
  static fromArgs(args: ListingConfigArgs) {
    return new ListingConfig(
      args.version,
      args.startTime,
      args.endTime,
      args.highestBid,
      args.bump,
      args.reservePrice,
      args.minBidIncrement,
      args.timeExtPeriod,
      args.timeExtDelta,
      args.allowHighBidCancel,
    );
  }

  /**
   * Deserializes the {@link ListingConfig} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [ListingConfig, number] {
    return ListingConfig.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ListingConfig} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<ListingConfig> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find ListingConfig account at ${address}`);
    }
    return ListingConfig.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link ListingConfig} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ListingConfig, number] {
    return listingConfigBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link ListingConfig} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return listingConfigBeet.serialize({
      accountDiscriminator: listingConfigDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ListingConfig}
   */
  static get byteSize() {
    return listingConfigBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ListingConfig} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(ListingConfig.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link ListingConfig} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === ListingConfig.byteSize;
  }

  /**
   * Returns a readable version of {@link ListingConfig} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      version: 'ListingConfigVersion.' + ListingConfigVersion[this.version],
      startTime: this.startTime,
      endTime: this.endTime,
      highestBid: this.highestBid,
      bump: this.bump,
      reservePrice: (() => {
        const x = <{ toNumber: () => number }>this.reservePrice;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      minBidIncrement: (() => {
        const x = <{ toNumber: () => number }>this.minBidIncrement;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      timeExtPeriod: this.timeExtPeriod,
      timeExtDelta: this.timeExtDelta,
      allowHighBidCancel: this.allowHighBidCancel,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const listingConfigBeet = new beet.BeetStruct<
  ListingConfig,
  ListingConfigArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', listingConfigVersionBeet],
    ['startTime', beet.i64],
    ['endTime', beet.i64],
    ['highestBid', bidBeet],
    ['bump', beet.u8],
    ['reservePrice', beet.u64],
    ['minBidIncrement', beet.u64],
    ['timeExtPeriod', beet.u32],
    ['timeExtDelta', beet.u32],
    ['allowHighBidCancel', beet.bool],
  ],
  ListingConfig.fromArgs,
  'ListingConfig',
);
