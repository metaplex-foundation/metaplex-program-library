/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category ProcessUnstake
 * @category generated
 */
export const processUnstakeStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ProcessUnstakeInstructionArgs',
);
/**
 * Accounts required by the _processUnstake_ instruction
 *
 * @property [_writable_, **signer**] member
 * @property [_writable_] fanout
 * @property [_writable_] membershipVoucher
 * @property [_writable_] membershipMint
 * @property [_writable_] membershipMintTokenAccount
 * @property [_writable_] memberStakeAccount
 * @property [] instructions
 * @category Instructions
 * @category ProcessUnstake
 * @category generated
 */
export type ProcessUnstakeInstructionAccounts = {
  member: web3.PublicKey;
  fanout: web3.PublicKey;
  membershipVoucher: web3.PublicKey;
  membershipMint: web3.PublicKey;
  membershipMintTokenAccount: web3.PublicKey;
  memberStakeAccount: web3.PublicKey;
  instructions: web3.PublicKey;
};

export const processUnstakeInstructionDiscriminator = [217, 160, 136, 174, 149, 62, 79, 133];

/**
 * Creates a _ProcessUnstake_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ProcessUnstake
 * @category generated
 */
export function createProcessUnstakeInstruction(accounts: ProcessUnstakeInstructionAccounts) {
  const {
    member,
    fanout,
    membershipVoucher,
    membershipMint,
    membershipMintTokenAccount,
    memberStakeAccount,
    instructions,
  } = accounts;

  const [data] = processUnstakeStruct.serialize({
    instructionDiscriminator: processUnstakeInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: member,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: fanout,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: membershipVoucher,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: membershipMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: membershipMintTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: memberStakeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: instructions,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'),
    keys,
    data,
  });
  return ix;
}
