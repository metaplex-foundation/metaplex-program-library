/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { InitializeFanoutArgs, initializeFanoutArgsBeet } from '../types/InitializeFanoutArgs';
import { MembershipModel, membershipModelBeet } from '../types/MembershipModel';

/**
 * @category Instructions
 * @category ProcessInit
 * @category generated
 */
export type ProcessInitInstructionArgs = {
  args: InitializeFanoutArgs;
  model: MembershipModel;
};
/**
 * @category Instructions
 * @category ProcessInit
 * @category generated
 */
export const processInitStruct = new beet.FixableBeetArgsStruct<
  ProcessInitInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', initializeFanoutArgsBeet],
    ['model', membershipModelBeet],
  ],
  'ProcessInitInstructionArgs',
);
/**
 * Accounts required by the _processInit_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] fanout
 * @property [_writable_] holdingAccount
 * @property [_writable_] membershipMint
 * @category Instructions
 * @category ProcessInit
 * @category generated
 */
export type ProcessInitInstructionAccounts = {
  authority: web3.PublicKey;
  fanout: web3.PublicKey;
  holdingAccount: web3.PublicKey;
  membershipMint: web3.PublicKey;
};

export const processInitInstructionDiscriminator = [172, 5, 165, 143, 86, 159, 50, 237];

/**
 * Creates a _ProcessInit_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessInit
 * @category generated
 */
export function createProcessInitInstruction(
  accounts: ProcessInitInstructionAccounts,
  args: ProcessInitInstructionArgs,
) {
  const { authority, fanout, holdingAccount, membershipMint } = accounts;

  const [data] = processInitStruct.serialize({
    instructionDiscriminator: processInitInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: fanout,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: holdingAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: membershipMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'),
    keys,
    data,
  });
  return ix;
}
