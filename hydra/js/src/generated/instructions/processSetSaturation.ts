/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category ProcessSetSaturation
 * @category generated
 */
export type ProcessSetSaturationInstructionArgs = {
  saturationLimit: beet.bignum;
};
/**
 * @category Instructions
 * @category ProcessSetSaturation
 * @category generated
 */
export const processSetSaturationStruct = new beet.BeetArgsStruct<
  ProcessSetSaturationInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['saturationLimit', beet.u64],
  ],
  'ProcessSetSaturationInstructionArgs',
);
/**
 * Accounts required by the _processSetSaturation_ instruction
 *
 * @property [**signer**] authority
 * @property [] member
 * @property [_writable_] fanout
 * @property [_writable_] membershipAccount
 * @category Instructions
 * @category ProcessSetSaturation
 * @category generated
 */
export type ProcessSetSaturationInstructionAccounts = {
  authority: web3.PublicKey;
  member: web3.PublicKey;
  fanout: web3.PublicKey;
  membershipAccount: web3.PublicKey;
};

export const processSetSaturationInstructionDiscriminator = [36, 113, 187, 145, 92, 204, 116, 202];

/**
 * Creates a _ProcessSetSaturation_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessSetSaturation
 * @category generated
 */
export function createProcessSetSaturationInstruction(
  accounts: ProcessSetSaturationInstructionAccounts,
  args: ProcessSetSaturationInstructionArgs,
) {
  const { authority, member, fanout, membershipAccount } = accounts;

  const [data] = processSetSaturationStruct.serialize({
    instructionDiscriminator: processSetSaturationInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: member,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: fanout,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: membershipAccount,
      isWritable: true,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'),
    keys,
    data,
  });
  return ix;
}
