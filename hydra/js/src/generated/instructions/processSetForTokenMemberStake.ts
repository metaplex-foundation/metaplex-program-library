/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category ProcessSetForTokenMemberStake
 * @category generated
 */
export type ProcessSetForTokenMemberStakeInstructionArgs = {
  shares: beet.bignum;
};
/**
 * @category Instructions
 * @category ProcessSetForTokenMemberStake
 * @category generated
 */
export const processSetForTokenMemberStakeStruct = new beet.BeetArgsStruct<
  ProcessSetForTokenMemberStakeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['shares', beet.u64],
  ],
  'ProcessSetForTokenMemberStakeInstructionArgs',
);
/**
 * Accounts required by the _processSetForTokenMemberStake_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [] member
 * @property [_writable_] fanout
 * @property [_writable_] membershipVoucher
 * @property [_writable_] membershipMint
 * @property [_writable_] membershipMintTokenAccount
 * @property [_writable_] memberStakeAccount
 * @category Instructions
 * @category ProcessSetForTokenMemberStake
 * @category generated
 */
export type ProcessSetForTokenMemberStakeInstructionAccounts = {
  authority: web3.PublicKey;
  member: web3.PublicKey;
  fanout: web3.PublicKey;
  membershipVoucher: web3.PublicKey;
  membershipMint: web3.PublicKey;
  membershipMintTokenAccount: web3.PublicKey;
  memberStakeAccount: web3.PublicKey;
};

export const processSetForTokenMemberStakeInstructionDiscriminator = [
  210, 40, 6, 254, 2, 80, 154, 109,
];

/**
 * Creates a _ProcessSetForTokenMemberStake_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProcessSetForTokenMemberStake
 * @category generated
 */
export function createProcessSetForTokenMemberStakeInstruction(
  accounts: ProcessSetForTokenMemberStakeInstructionAccounts,
  args: ProcessSetForTokenMemberStakeInstructionArgs,
) {
  const {
    authority,
    member,
    fanout,
    membershipVoucher,
    membershipMint,
    membershipMintTokenAccount,
    memberStakeAccount,
  } = accounts;

  const [data] = processSetForTokenMemberStakeStruct.serialize({
    instructionDiscriminator: processSetForTokenMemberStakeInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: member,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: fanout,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: membershipVoucher,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: membershipMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: membershipMintTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: memberStakeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'),
    keys,
    data,
  });
  return ix;
}
