/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * IncorrectOwner: 'Account does not have correct owner'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectOwnerError extends Error {
  readonly code: number = 0x1770;
  readonly name: string = 'IncorrectOwner';
  constructor() {
    super('Account does not have correct owner');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectOwnerError);
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new IncorrectOwnerError());
createErrorFromNameLookup.set('IncorrectOwner', () => new IncorrectOwnerError());

/**
 * Uninitialized: 'Account is not initialized'
 *
 * @category Errors
 * @category generated
 */
export class UninitializedError extends Error {
  readonly code: number = 0x1771;
  readonly name: string = 'Uninitialized';
  constructor() {
    super('Account is not initialized');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UninitializedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UninitializedError());
createErrorFromNameLookup.set('Uninitialized', () => new UninitializedError());

/**
 * MintMismatch: 'Mint Mismatch'
 *
 * @category Errors
 * @category generated
 */
export class MintMismatchError extends Error {
  readonly code: number = 0x1772;
  readonly name: string = 'MintMismatch';
  constructor() {
    super('Mint Mismatch');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new MintMismatchError());
createErrorFromNameLookup.set('MintMismatch', () => new MintMismatchError());

/**
 * IndexGreaterThanLength: 'Index greater than length'
 *
 * @category Errors
 * @category generated
 */
export class IndexGreaterThanLengthError extends Error {
  readonly code: number = 0x1773;
  readonly name: string = 'IndexGreaterThanLength';
  constructor() {
    super('Index greater than length');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IndexGreaterThanLengthError);
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new IndexGreaterThanLengthError());
createErrorFromNameLookup.set('IndexGreaterThanLength', () => new IndexGreaterThanLengthError());

/**
 * NumericalOverflowError: 'Numerical overflow error'
 *
 * @category Errors
 * @category generated
 */
export class NumericalOverflowErrorError extends Error {
  readonly code: number = 0x1774;
  readonly name: string = 'NumericalOverflowError';
  constructor() {
    super('Numerical overflow error');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericalOverflowErrorError);
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new NumericalOverflowErrorError());
createErrorFromNameLookup.set('NumericalOverflowError', () => new NumericalOverflowErrorError());

/**
 * TooManyCreators: 'Can only provide up to 4 creators to candy machine (because candy machine is one)'
 *
 * @category Errors
 * @category generated
 */
export class TooManyCreatorsError extends Error {
  readonly code: number = 0x1775;
  readonly name: string = 'TooManyCreators';
  constructor() {
    super('Can only provide up to 4 creators to candy machine (because candy machine is one)');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooManyCreatorsError);
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new TooManyCreatorsError());
createErrorFromNameLookup.set('TooManyCreators', () => new TooManyCreatorsError());

/**
 * CandyMachineEmpty: 'Candy machine is empty'
 *
 * @category Errors
 * @category generated
 */
export class CandyMachineEmptyError extends Error {
  readonly code: number = 0x1776;
  readonly name: string = 'CandyMachineEmpty';
  constructor() {
    super('Candy machine is empty');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CandyMachineEmptyError);
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new CandyMachineEmptyError());
createErrorFromNameLookup.set('CandyMachineEmpty', () => new CandyMachineEmptyError());

/**
 * HiddenSettingsDoNotHaveConfigLines: 'Candy machines using hidden uris do not have config lines, they have a single hash representing hashed order'
 *
 * @category Errors
 * @category generated
 */
export class HiddenSettingsDoNotHaveConfigLinesError extends Error {
  readonly code: number = 0x1777;
  readonly name: string = 'HiddenSettingsDoNotHaveConfigLines';
  constructor() {
    super(
      'Candy machines using hidden uris do not have config lines, they have a single hash representing hashed order',
    );
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, HiddenSettingsDoNotHaveConfigLinesError);
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new HiddenSettingsDoNotHaveConfigLinesError());
createErrorFromNameLookup.set(
  'HiddenSettingsDoNotHaveConfigLines',
  () => new HiddenSettingsDoNotHaveConfigLinesError(),
);

/**
 * CannotChangeNumberOfLines: 'Cannot change number of lines unless is a hidden config'
 *
 * @category Errors
 * @category generated
 */
export class CannotChangeNumberOfLinesError extends Error {
  readonly code: number = 0x1778;
  readonly name: string = 'CannotChangeNumberOfLines';
  constructor() {
    super('Cannot change number of lines unless is a hidden config');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotChangeNumberOfLinesError);
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new CannotChangeNumberOfLinesError());
createErrorFromNameLookup.set(
  'CannotChangeNumberOfLines',
  () => new CannotChangeNumberOfLinesError(),
);

/**
 * CannotSwitchToHiddenSettings: 'Cannot switch to hidden settings after items available is greater than 0'
 *
 * @category Errors
 * @category generated
 */
export class CannotSwitchToHiddenSettingsError extends Error {
  readonly code: number = 0x1779;
  readonly name: string = 'CannotSwitchToHiddenSettings';
  constructor() {
    super('Cannot switch to hidden settings after items available is greater than 0');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotSwitchToHiddenSettingsError);
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new CannotSwitchToHiddenSettingsError());
createErrorFromNameLookup.set(
  'CannotSwitchToHiddenSettings',
  () => new CannotSwitchToHiddenSettingsError(),
);

/**
 * IncorrectCollectionAuthority: 'Incorrect collection NFT authority'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectCollectionAuthorityError extends Error {
  readonly code: number = 0x177a;
  readonly name: string = 'IncorrectCollectionAuthority';
  constructor() {
    super('Incorrect collection NFT authority');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectCollectionAuthorityError);
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new IncorrectCollectionAuthorityError());
createErrorFromNameLookup.set(
  'IncorrectCollectionAuthority',
  () => new IncorrectCollectionAuthorityError(),
);

/**
 * MetadataAccountMustBeEmpty: 'The metadata account has data in it, and this must be empty to mint a new NFT'
 *
 * @category Errors
 * @category generated
 */
export class MetadataAccountMustBeEmptyError extends Error {
  readonly code: number = 0x177b;
  readonly name: string = 'MetadataAccountMustBeEmpty';
  constructor() {
    super('The metadata account has data in it, and this must be empty to mint a new NFT');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MetadataAccountMustBeEmptyError);
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new MetadataAccountMustBeEmptyError());
createErrorFromNameLookup.set(
  'MetadataAccountMustBeEmpty',
  () => new MetadataAccountMustBeEmptyError(),
);

/**
 * NoChangingCollectionDuringMint: 'Can't change collection settings after items have begun to be minted'
 *
 * @category Errors
 * @category generated
 */
export class NoChangingCollectionDuringMintError extends Error {
  readonly code: number = 0x177c;
  readonly name: string = 'NoChangingCollectionDuringMint';
  constructor() {
    super("Can't change collection settings after items have begun to be minted");
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoChangingCollectionDuringMintError);
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new NoChangingCollectionDuringMintError());
createErrorFromNameLookup.set(
  'NoChangingCollectionDuringMint',
  () => new NoChangingCollectionDuringMintError(),
);

/**
 * ExceededLengthError: 'Value longer than expected maximum value'
 *
 * @category Errors
 * @category generated
 */
export class ExceededLengthErrorError extends Error {
  readonly code: number = 0x177d;
  readonly name: string = 'ExceededLengthError';
  constructor() {
    super('Value longer than expected maximum value');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ExceededLengthErrorError);
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new ExceededLengthErrorError());
createErrorFromNameLookup.set('ExceededLengthError', () => new ExceededLengthErrorError());

/**
 * MissingConfigLinesSettings: 'Missing config lines settings'
 *
 * @category Errors
 * @category generated
 */
export class MissingConfigLinesSettingsError extends Error {
  readonly code: number = 0x177e;
  readonly name: string = 'MissingConfigLinesSettings';
  constructor() {
    super('Missing config lines settings');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingConfigLinesSettingsError);
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new MissingConfigLinesSettingsError());
createErrorFromNameLookup.set(
  'MissingConfigLinesSettings',
  () => new MissingConfigLinesSettingsError(),
);

/**
 * CannotIncreaseLength: 'Cannot increase the length in config lines settings'
 *
 * @category Errors
 * @category generated
 */
export class CannotIncreaseLengthError extends Error {
  readonly code: number = 0x177f;
  readonly name: string = 'CannotIncreaseLength';
  constructor() {
    super('Cannot increase the length in config lines settings');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotIncreaseLengthError);
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new CannotIncreaseLengthError());
createErrorFromNameLookup.set('CannotIncreaseLength', () => new CannotIncreaseLengthError());

/**
 * CannotSwitchFromHiddenSettings: 'Cannot switch from hidden settings'
 *
 * @category Errors
 * @category generated
 */
export class CannotSwitchFromHiddenSettingsError extends Error {
  readonly code: number = 0x1780;
  readonly name: string = 'CannotSwitchFromHiddenSettings';
  constructor() {
    super('Cannot switch from hidden settings');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotSwitchFromHiddenSettingsError);
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new CannotSwitchFromHiddenSettingsError());
createErrorFromNameLookup.set(
  'CannotSwitchFromHiddenSettings',
  () => new CannotSwitchFromHiddenSettingsError(),
);

/**
 * CannotChangeSequentialIndexGeneration: 'Cannot change sequential index generation after items have begun to be minted'
 *
 * @category Errors
 * @category generated
 */
export class CannotChangeSequentialIndexGenerationError extends Error {
  readonly code: number = 0x1781;
  readonly name: string = 'CannotChangeSequentialIndexGeneration';
  constructor() {
    super('Cannot change sequential index generation after items have begun to be minted');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotChangeSequentialIndexGenerationError);
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new CannotChangeSequentialIndexGenerationError());
createErrorFromNameLookup.set(
  'CannotChangeSequentialIndexGeneration',
  () => new CannotChangeSequentialIndexGenerationError(),
);

/**
 * CollectionKeyMismatch: 'Collection public key mismatch'
 *
 * @category Errors
 * @category generated
 */
export class CollectionKeyMismatchError extends Error {
  readonly code: number = 0x1782;
  readonly name: string = 'CollectionKeyMismatch';
  constructor() {
    super('Collection public key mismatch');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectionKeyMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new CollectionKeyMismatchError());
createErrorFromNameLookup.set('CollectionKeyMismatch', () => new CollectionKeyMismatchError());

/**
 * CouldNotRetrieveConfigLineData: 'Could not retrive config line data'
 *
 * @category Errors
 * @category generated
 */
export class CouldNotRetrieveConfigLineDataError extends Error {
  readonly code: number = 0x1783;
  readonly name: string = 'CouldNotRetrieveConfigLineData';
  constructor() {
    super('Could not retrive config line data');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CouldNotRetrieveConfigLineDataError);
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new CouldNotRetrieveConfigLineDataError());
createErrorFromNameLookup.set(
  'CouldNotRetrieveConfigLineData',
  () => new CouldNotRetrieveConfigLineDataError(),
);

/**
 * NotFullyLoaded: 'Not all config lines were added to the candy machine'
 *
 * @category Errors
 * @category generated
 */
export class NotFullyLoadedError extends Error {
  readonly code: number = 0x1784;
  readonly name: string = 'NotFullyLoaded';
  constructor() {
    super('Not all config lines were added to the candy machine');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotFullyLoadedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new NotFullyLoadedError());
createErrorFromNameLookup.set('NotFullyLoaded', () => new NotFullyLoadedError());

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}
